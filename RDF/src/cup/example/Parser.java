
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\010\003\000\002\011\003\000\002\013\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\004\000\002\014" +
    "\002\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\016\006\000\002\016\005\000\002\017\006\000\002\017" +
    "\006\000\002\017\007\000\002\017\005\000\002\020\005" +
    "\000\002\021\005\000\002\021\003\000\002\021\007\000" +
    "\002\021\005\000\002\025\005\000\002\025\003\000\002" +
    "\025\007\000\002\025\005\000\002\023\005\000\002\023" +
    "\003\000\002\023\007\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\007\000\002\024\007\000\002" +
    "\024\005\000\002\024\005\000\002\027\005\000\002\030" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\041\002\000\002\031\006\000\002\032\005\000" +
    "\002\033\005\000\002\034\005\000\002\035\005\000\002" +
    "\036\005\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\020\053\012\074\014\075\010\076\006\100" +
    "\007\101\011\102\005\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\uffe8\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\015\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\006\002\012\010\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

 protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}
  	protected MultiTreeNode createDeclarationNode(MultiTreeNode declaration) { throw new UnsupportedOperationException();}
 	protected MultiTreeNode createFunctionDeclarationNode(MultiTreeNode typeSpecifier, String identifierName, MultiTreeNode paramsList, MultiTreeNode compoundStatement) { throw new UnsupportedOperationException(); }
  	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();  }
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName, Integer value ){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createCompoundStatement(MultiTreeNode declarations, MultiTreeNode instructions){throw new UnsupportedOperationException();  }
	protected MultiTreeNode createIfStatement(String identifier, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){throw new UnsupportedOperationException();  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // coreSyntaxTerms ::= RDF 
            {
              MultiTreeNode RESULT =null;
		Location rdfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rdfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode rdf = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 System.out.println ( "coreSyntaxTerms -> RDF \n ") ; 
										RESULT = syntaxTree.create("coreSyntaxTerms", rdf);
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= coreSyntaxTerms EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // coreSyntaxTerms ::= RDFID 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG4
 System.out.println ( "coreSyntaxTerms -> RDFID \n ") ; 
										 RESULT = createTypeSpecifier("RDFID");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // coreSyntaxTerms ::= RDFABOUT 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG5
 System.out.println ( "coreSyntaxTerms -> RDFABOUT \n ") ; 
										 RESULT = createTypeSpecifier("RDFABOUT");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // coreSyntaxTerms ::= RDFPARSETYPE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG6
 System.out.println ( "coreSyntaxTerms -> RDFPARSETYPE \n ") ; 
													  RESULT = createTypeSpecifier("RDFPARSETYPE");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // coreSyntaxTerms ::= RDFRESOURCE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG7
 System.out.println ( "coreSyntaxTerms -> RDFRESOURCE \n ") ; 
											 RESULT = createTypeSpecifier("RDFRESOURCE");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // coreSyntaxTerms ::= RDFNODEID 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG8
 System.out.println ( "coreSyntaxTerms -> RDFNODEID \n ") ; 
										  RESULT = createTypeSpecifier("RDFNODEID");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // coreSyntaxTerms ::= RDFDATATYPE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG9
 System.out.println ( "coreSyntaxTerms -> RDFDATATYPE \n ") ; 
										 RESULT = createTypeSpecifier("RDFDATATYPE");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("coreSyntaxTerms",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // syntaxTerms ::= coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		Location cstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cst = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 System.out.println ( "SyntaxTerms -> coreSyntaxTerms \n ") ; 
										RESULT = createListNode("syntaxTerms", cst);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syntaxTerms",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // syntaxTerms ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG11
 System.out.println ( "syntaxTerms -> RDFDESCR \n ") ; 
										RESULT = createTypeSpecifier("RDFDESCR");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syntaxTerms",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // syntaxTerms ::= RDFLI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG12
 System.out.println ( "syntaxTerms -> RDFLI \n ") ; 
										RESULT = createTypeSpecifier("RDFLI");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syntaxTerms",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // oldTerms ::= RDFABOUTE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG13
 System.out.println ( "oldTerms -> RDFABOUTE  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oldTerms",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // oldTerms ::= RDFAEP 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG14
 System.out.println ( "oldTerms-> RDFAEP  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oldTerms",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // oldTerms ::= RDFBAGID 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG15
 System.out.println ( "oldTerms -> RDFBAGID \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oldTerms",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nodeElementURIs ::= coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG16
 System.out.println ( "nodeElementURIs -> coreSyntaxTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementURIs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nodeElementURIs ::= RDFLI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG17
 System.out.println ( "nodeElementURIs -> RDFLI  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementURIs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nodeElementURIs ::= oldTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG18
 System.out.println ( "nodeElementURIs -> oldTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementURIs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // propertyElementURIs ::= coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG19
 System.out.println ( "propertyElementURIs -> coreSyntaxTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElementURIs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propertyElementURIs ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG20
 System.out.println ( "propertyElementURIs -> RDFDESCR  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElementURIs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propertyElementURIs ::= oldTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG21
 System.out.println ( "propertyElementURIs -> oldTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElementURIs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propertyAttributeURIs ::= coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG22
 System.out.println ( "propertyAttributeURIs -> coreSyntaxTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttributeURIs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propertyAttributeURIs ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG23
 System.out.println ( "propertyAttributeURIs -> RDFDESCR  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttributeURIs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propertyAttributeURIs ::= RDFLI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG24
 System.out.println ( "propertyAttributeURIs -> RDFLI  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttributeURIs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propertyAttributeURIs ::= oldTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG25
 System.out.println ( "propertyAttributeURIs -> oldTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttributeURIs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // doc ::= RDF 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG26
 System.out.println ( "doc -> RDF  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RDF ::= RDFR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG27
 System.out.println ( "RDF -> RDFR  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nodeElementList ::= nodeElement 
            {
              MultiTreeNode RESULT =null;
		Location nexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ne = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 System.out.println ( "nodeElementList -> nodeElement  \n ") ; 
										RESULT = createListNode("nodeElementList", ne);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nodeElement ::= URI EQUAL coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG29
 System.out.println ( "nodeElement -> coreSyntaxTerms  \n ") ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nodeElement ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG30
 System.out.println ( "nodeElement -> RDFDESCR  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nodeElement ::= oldTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG31
 System.out.println ( "nodeElement -> oldTerms  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nodeElement ::= idAttr 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG32
 System.out.println ( "nodeElement -> idAttr  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nodeElement ::= nodeIdAttr 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG33
 System.out.println ( "nodeElement -> nodeIdAttr  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nodeElement ::= aboutAttr COMMA coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG34
 System.out.println ( "nodeElement -> aboutAttr  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nodeElement ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG35
 System.out.println ( "nodeElement -> RDFDESCR  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nodeElement ::= RDFLI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG36
 System.out.println ( "nodeElement -> RDFLI  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nodeElement ::= oldTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG37
 System.out.println ( "nodeElement -> oldTerms  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nodeElement ::= COMMA coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG38
 System.out.println ( "nodeElement -> COMMA coreSyntaxTerms  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nodeElement ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG39
 System.out.println ( "nodeElement -> RDFDESCR  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nodeElement ::= RDFLI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG40
 System.out.println ( "nodeElement -> RDFLI  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nodeElement ::= oldTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG41
 System.out.println ( "nodeElement -> oldTerms  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // propertyEltList ::= propertyEltList propertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG42
 System.out.println ( "propertyEltList -> propertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // propertyEltList ::= 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // propertyElt ::= resourcePropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG43
 System.out.println ( "propertyElt -> resourcePropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // propertyElt ::= literalPropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG44
 System.out.println ( "propertyElt -> literalPropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // propertyElt ::= parseTypeLiteralPropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG45
 System.out.println ( "propertyElt -> parseTypeLiteralPropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // propertyElt ::= parseTypeResourcePropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG46
 System.out.println ( "propertyElt -> parseTypeResourcePropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // propertyElt ::= parseTypeCollectionPropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG47
 System.out.println ( "propertyElt -> parseTypeCollectionPropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // propertyElt ::= parseTypeOtherPropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG48
 System.out.println ( "propertyElt -> parseTypeOtherPropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // propertyElt ::= emptyPropertyElt 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG49
 System.out.println ( "propertyElt -> emptyPropertyElt  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // resourcePropertyElt ::= URI EQUAL coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG50
 System.out.println ( "resourcePropertyElt -> coreSyntaxTerms  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // resourcePropertyElt ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG51
 System.out.println ( "resourcePropertyElt -> RDFDESCR  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // resourcePropertyElt ::= oldTerms COMMA idAttr propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG52
 System.out.println ( "resourcePropertyElt -> oldTerms COMMA idAttr propertyEltList  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // resourcePropertyElt ::= oldTerms COMMA propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG53
 System.out.println ( "resourcePropertyElt -> oldTerms COMMA propertyEltList	  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literalPropertyElt ::= URI EQUAL COMMA datatypeAttr 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG54
 System.out.println ( "literalPropertyElt -> COMMA datatypeAttr  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literalPropertyElt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literalPropertyElt ::= URI EQUAL idAttr COMMA 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG55
 System.out.println ( "literalPropertyElt -> idAttr COMMA  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literalPropertyElt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literalPropertyElt ::= URI EQUAL idAttr COMMA datatypeAttr 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG56
 System.out.println ( "literalPropertyElt -> idAttr COMMA datatypeAttr  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literalPropertyElt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literalPropertyElt ::= URI EQUAL COMMA 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG57
 System.out.println ( "literalPropertyElt -> COMMA  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literalPropertyElt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parseTypeLiteralPropertyElt ::= URI EQUAL propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG58
 System.out.println ( "parseTypeLiteralPropertyElt -> propertyEltList  \n ") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeLiteralPropertyElt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parseTypeResourcePropertyElt ::= URI EQUAL coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG59
 System.out.println ( "parseTypeResourcePropertyElt -> coreSyntaxTerms \n") ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeResourcePropertyElt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parseTypeResourcePropertyElt ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG60
 System.out.println ( "parseTypeResourcePropertyElt -> RDFDESCR \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeResourcePropertyElt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parseTypeResourcePropertyElt ::= oldTerms COMMA idAttr COMMA parseLiteral 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG61
 System.out.println ( "parseTypeResourcePropertyElt -> oldTerms  COMMA idAttr COMMA parseLiteral \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeResourcePropertyElt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parseTypeResourcePropertyElt ::= oldTerms COMMA parseLiteral 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG62
 System.out.println ( "parseTypeResourcePropertyElt -> oldTerms  COMMA  parseLiteral \n " ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeResourcePropertyElt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parseTypeCollectionPropertyElt ::= URI EQUAL coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG63
 System.out.println ( "parseTypeCollectionPropertyElt -> coreSyntaxTerms \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeCollectionPropertyElt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parseTypeCollectionPropertyElt ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG64
 System.out.println ( "parseTypeCollectionPropertyElt -> RDFDESCR \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeCollectionPropertyElt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parseTypeCollectionPropertyElt ::= oldTerms COMMA idAttr COMMA parseResource 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG65
 System.out.println ( "parseTypeCollectionPropertyElt ->  oldTerms  COMMA idAttr  COMMA parseResource  \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeCollectionPropertyElt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parseTypeCollectionPropertyElt ::= oldTerms COMMA parseResource 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG66
 System.out.println ( "parseTypeCollectionPropertyElt -> oldTerms  COMMA  parseResource  	 \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeCollectionPropertyElt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parseTypeOtherPropertyElt ::= URI EQUAL coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG67
 System.out.println ( "parseTypeOtherPropertyElt -> coreSyntaxTerms \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeOtherPropertyElt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parseTypeOtherPropertyElt ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG68
 System.out.println ( "parseTypeOtherPropertyElt -> RDFDESCR \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeOtherPropertyElt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parseTypeOtherPropertyElt ::= oldTerms COMMA idAttr COMMA parseOther 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG69
 System.out.println ( "parseTypeOtherPropertyElt -> oldTerms  COMMA idAttr COMMA parseOther \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeOtherPropertyElt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parseTypeOtherPropertyElt ::= oldTerms COMMA parseOther 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG70
 System.out.println ( "parseTypeOtherPropertyElt -> oldTerms  COMMA  parseOther	 \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeOtherPropertyElt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parseTypeOtherPropertyElt ::= propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG71
 System.out.println ( "parseTypeOtherPropertyElt -> propertyEltList \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseTypeOtherPropertyElt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // emptyPropertyElt ::= URI EQUAL coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG72
 System.out.println ( "emptyPropertyElt -> propertyEltList \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // emptyPropertyElt ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG73
 System.out.println ( "emptyPropertyElt -> RDFDESCR \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // emptyPropertyElt ::= oldTerms COMMA resourceAttr 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // emptyPropertyElt ::= nodeIdAttr COMMA propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG74
 System.out.println ( "emptyPropertyElt -> oldTerms	COMMA  ( resourceAttr | nodeIdAttr ) COMMA propertyEltList	 \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // emptyPropertyElt ::= oldTerms COMMA idAttr COMMA propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG75
 System.out.println ( "emptyPropertyElt -> oldTerms	COMMA  idAttr COMMA propertyEltList	 \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // emptyPropertyElt ::= oldTerms COMMA idAttr COMMA resourceAttr 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // emptyPropertyElt ::= nodeIdAttr COMMA propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG76
 System.out.println ( "emptyPropertyElt -> oldTerms	COMMA  idAttr COMMA ( resourceAttr | nodeIdAttr )  COMMA propertyEltList \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // emptyPropertyElt ::= oldTerms COMMA propertyEltList 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG77
 System.out.println ( "emptyPropertyElt -> oldTerms	COMMA   propertyEltList  \n" ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyPropertyElt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // nodeIdAttr ::= RDFNODEID EQUAL RDFID 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG78
 System.out.println ( "nodeIdAttr -> RDFNODEID \n" ) ; 

//@@CUPDBG79
 System.out.println ( "nodeIdAttr -> RDFID \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeIdAttr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // aboutAttr ::= RDFABOUT EQUAL URI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG80
 System.out.println ( "aboutAttr -> RDFABOUT \n" ) ; 

//@@CUPDBG81
 System.out.println ( "aboutAttr -> URI \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aboutAttr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // propertyAttr ::= coreSyntaxTerms 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG82
 System.out.println ( "propertyAttr -> coreSyntaxTerms \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // propertyAttr ::= RDFDESCR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG83
 System.out.println ( "propertyAttr -> RDFDESCR \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // propertyAttr ::= RDFLI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG84
 System.out.println ( "propertyAttr -> RDFLI \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$0 ::= 
            {
              MultiTreeNode RESULT =null;
//@@CUPDBG85
 System.out.println ( "propertyAttr -> oldTerms \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // propertyAttr ::= oldTerms NT$0 EQUAL anyString 
            {
              MultiTreeNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MultiTreeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG86
 System.out.println ( "propertyAttr -> anyString \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyAttr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // resourceAttr ::= RDFRESOURCE EQUAL RDFID 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG87
 System.out.println ( "resourceAttr -> RDFRESOURCE \n" ) ; 

//@@CUPDBG88
 System.out.println ( "resourceAttr -> RDFID \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourceAttr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // datatypeAttr ::= RDFDATATYPE EQUAL RDFID 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG89
 System.out.println ( "datatypeAttr -> RDFDATATYPE \n" ) ; 

//@@CUPDBG90
 System.out.println ( "datatypeAttr -> RDFID \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datatypeAttr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parseLiteral ::= RDFPARSETYPE EQUAL anyString 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG91
 System.out.println ( "parseLiteral -> RDFPARSETYPE \n" ) ; 

//@@CUPDBG92
 System.out.println ( "parseLiteral -> anyString \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseLiteral",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parseResource ::= RDFPARSETYPE EQUAL anyString 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG93
 System.out.println ( "parseResource -> RDFPARSETYPE \n" ) ; 

//@@CUPDBG94
 System.out.println ( "parseResource -> anyString \n" ) ; 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseResource",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parseCollection ::= RDFPARSETYPE EQUAL anyString 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG95
 System.out.println ( "parseCollection -> RDFPARSETYPE \n" ) ; 

													//@@CUPDBG96
 System.out.println ( "parseCollection -> anyString \n" ) ; 

													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseCollection",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parseOther ::= RDFPARSETYPE EQUAL anyString 
            {
              MultiTreeNode RESULT =null;
		Location ptypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ptypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object ptype = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG97
 System.out.println ( "parseOther -> RDFPARSETYPE \n" ) ; 
														RESULT = createVarDeclaration(ptype,as,1);
													//@@CUPDBG98
 System.out.println ( "parseOther -> anyString \n" ) ; 

													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parseOther",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
