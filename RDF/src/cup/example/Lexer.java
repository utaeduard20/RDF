/* The following code was generated by JFlex 1.3.5 on 12/13/22, 12:18 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 12/13/22, 12:18 PM from the specification file
 * <tt>file:/Z:/PT/RDF/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\3\1\66"+
    "\1\6\1\0\1\0\3\0\1\72\1\73\1\11\1\70\1\62\1\71"+
    "\1\0\1\10\12\5\1\17\1\67\1\13\1\55\1\23\1\65\1\63"+
    "\1\46\2\7\1\21\1\35\1\22\2\7\1\27\4\7\1\47\3\7"+
    "\1\20\1\53\1\44\6\7\1\56\1\64\1\57\1\4\1\12\1\4"+
    "\1\30\1\31\1\36\1\15\1\25\1\16\1\40\1\37\1\41\2\7"+
    "\1\52\1\50\1\43\1\32\1\42\1\54\1\14\1\24\1\34\1\33"+
    "\1\51\1\7\1\26\1\45\1\7\1\60\1\0\1\61\1\0\41\0"+
    "\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0"+
    "\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0"+
    "\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0\1\0"+
    "\46\0\2\0\1\0\6\0\51\0\6\0\1\0\1\0\55\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0\4\0"+
    "\4\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0\3\0"+
    "\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0\1\0"+
    "\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0\1\0"+
    "\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0\1\0"+
    "\16\0\12\0\41\0\11\0\2\0\4\0\1\0\2\0\1\0\30\0"+
    "\4\0\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0\3\0"+
    "\4\0\13\0\65\0\25\0\1\0\22\0\13\0\61\0\66\0\3\0"+
    "\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0\20\0"+
    "\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0"+
    "\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0"+
    "\12\0\4\0\7\0\2\0\1\0\1\0\2\0\3\0\1\0\6\0"+
    "\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\2\0"+
    "\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0\3\0"+
    "\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0\1\0"+
    "\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0\7\0"+
    "\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0\3\0"+
    "\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0\1\0"+
    "\1\0\7\0\1\0\6\0\1\0\3\0\1\0\10\0\2\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0"+
    "\1\0\7\0\2\0\2\0\2\0\3\0\7\0\3\0\4\0\2\0"+
    "\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0\1\0"+
    "\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0"+
    "\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0\5\0"+
    "\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0\12\0"+
    "\11\0\1\0\6\0\5\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\20\0\3\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0"+
    "\1\0\3\0\5\0\2\0\2\0\2\0\12\0\20\0\1\0\3\0"+
    "\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0"+
    "\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0"+
    "\7\0\1\0\1\0\2\0\2\0\2\0\12\0\1\0\2\0\15\0"+
    "\4\0\11\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0\1\0"+
    "\3\0\1\0\4\0\1\0\5\0\3\0\1\0\7\0\3\0\2\0"+
    "\2\0\12\0\12\0\6\0\1\0\3\0\1\0\22\0\3\0\30\0"+
    "\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0\6\0"+
    "\1\0\1\0\1\0\10\0\6\0\12\0\2\0\2\0\15\0\60\0"+
    "\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0"+
    "\1\0\1\0\1\0\5\0\1\0\30\0\1\0\1\0\1\0\12\0"+
    "\1\0\2\0\11\0\1\0\2\0\5\0\1\0\1\0\1\0\6\0"+
    "\2\0\12\0\2\0\4\0\40\0\1\0\27\0\2\0\6\0\12\0"+
    "\13\0\1\0\1\0\1\0\1\0\1\0\4\0\2\0\10\0\1\0"+
    "\44\0\4\0\24\0\1\0\2\0\5\0\13\0\1\0\44\0\11\0"+
    "\1\0\71\0\53\0\24\0\1\0\12\0\6\0\6\0\4\0\4\0"+
    "\3\0\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0\1\0"+
    "\17\0\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0\1\0"+
    "\u014d\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0"+
    "\51\0\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0"+
    "\103\0\2\0\3\0\40\0\20\0\20\0\126\0\2\0\6\0\3\0"+
    "\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\3\0\13\0\7\0"+
    "\15\0\1\0\4\0\3\0\13\0\22\0\3\0\13\0\22\0\2\0"+
    "\14\0\15\0\1\0\3\0\1\0\2\0\14\0\64\0\40\0\3\0"+
    "\1\0\3\0\2\0\1\0\2\0\12\0\41\0\4\0\1\0\12\0"+
    "\6\0\131\0\7\0\5\0\2\0\42\0\1\0\1\0\5\0\106\0"+
    "\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0\2\0"+
    "\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0\5\0"+
    "\4\0\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0\15\0"+
    "\1\0\10\0\16\0\1\0\2\0\77\0\5\0\57\0\21\0\7\0"+
    "\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0\12\0"+
    "\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0\12\0"+
    "\44\0\2\0\11\0\7\0\53\0\2\0\3\0\20\0\3\0\1\0"+
    "\25\0\4\0\1\0\6\0\1\0\2\0\3\0\1\0\5\0\300\0"+
    "\72\0\1\0\5\0\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0"+
    "\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\37\0"+
    "\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0\7\0"+
    "\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0\7\0"+
    "\16\0\5\0\32\0\5\0\20\0\2\0\23\0\1\0\13\0\5\0"+
    "\1\0\12\0\1\0\1\0\15\0\1\0\20\0\15\0\3\0\40\0"+
    "\20\0\15\0\4\0\1\0\3\0\14\0\21\0\1\0\4\0\1\0"+
    "\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0"+
    "\4\0\1\0\21\0\51\0\u0a77\0\57\0\1\0\57\0\1\0\205\0"+
    "\6\0\4\0\3\0\2\0\14\0\46\0\1\0\1\0\5\0\1\0"+
    "\2\0\70\0\7\0\1\0\17\0\1\0\27\0\11\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0\3\0\31\0"+
    "\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0\2\0\2\0"+
    "\2\0\3\0\1\0\132\0\1\0\4\0\5\0\53\0\1\0\136\0"+
    "\21\0\40\0\60\0\20\0\u0200\0\u19c0\0\100\0\u51fd\0\3\0\u048d\0"+
    "\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0"+
    "\1\0\4\0\12\0\1\0\37\0\2\0\120\0\2\0\45\0\11\0"+
    "\2\0\147\0\2\0\65\0\2\0\11\0\52\0\15\0\1\0\3\0"+
    "\1\0\4\0\1\0\27\0\5\0\4\0\1\0\13\0\1\0\7\0"+
    "\64\0\14\0\2\0\62\0\22\0\12\0\12\0\6\0\22\0\6\0"+
    "\3\0\1\0\1\0\2\0\13\0\34\0\10\0\2\0\27\0\15\0"+
    "\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0\6\0"+
    "\5\0\1\0\12\0\12\0\5\0\1\0\51\0\16\0\11\0\3\0"+
    "\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0\3\0"+
    "\62\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0\1\0"+
    "\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0\12\0"+
    "\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0\1\0"+
    "\53\0\1\0\16\0\6\0\163\0\10\0\1\0\2\0\2\0\12\0"+
    "\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0\152\0"+
    "\46\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0"+
    "\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0"+
    "\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0\20\0"+
    "\20\0\20\0\3\0\2\0\30\0\3\0\31\0\1\0\6\0\5\0"+
    "\1\0\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0\32\0"+
    "\4\0\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0\6\0"+
    "\2\0\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0\3\0"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    60,   120,   180,   120,   240,   120,   300,   120,   120, 
      240,   360,   420,   480,   120,   540,   600,   660,   720,   780, 
      840,   900,   960,  1020,  1080,  1140,  1200,  1260,  1320,   240, 
      240,   120,   120,   120,   120,   240,   120,   120,   120,   120, 
      120,   120,   120,   120,   300,   120,  1380,   120,  1440,  1500, 
     1560,  1620,  1680,  1740,   120,   120,  1800,  1860,  1920,  1980, 
     2040,  2100,  2160,  2220,  2280,  2340,  2400,  2460,  2520,  2580, 
     2640,   120,  2700,  2760,   120,  2820,  2880,  2940,  3000,  3060, 
     3120,  3180,  3240,  3300,  3360,  3420,  3480,  3540,  3600,  3660, 
     3720,  3780,  3840,  3900,  3960,  4020,  4080,  4140,   120,  4200, 
     4260,  4320,  4380,  4440,  4500,  4560,  4620,  4680,  4740,  4800, 
     4860,  4920,  4980,  5040,  5100,  5160,   120,  5220,  5280,  5340, 
     5400,  5460,  5520,  5580,  5640,  5700,  5760,  5820,  5880,  5940, 
     6000,  6060,  6120,  6180,  6240,  6300,  6360,  6420,  6480,  6540, 
     6600,  6660,  6720,  6780,  6840,  6900,   120,  6960,  7020,  7080, 
     7140,  7200,  7260,  7320,  7380,  7440,  7500,  7560,  7620,  7680, 
     7740,  7800,  7860,  7920,  7980,  8040,  8100,  8160,  8220,  8280, 
     8340,   120,   120,  8400,  8460,  8520,  8580,  8640,  8700,  8760, 
     8820,  8880,  8940,  9000,  9060,  9120,  9180,  9240,  9300,  9360, 
     9420,  9480,  9540,  9600,  9660,  9720,  9780,  9840,   120,  9900, 
     9960, 10020, 10080, 10140,   120,   120,   120,   120, 10200, 10260, 
    10320, 10380,   120, 10440, 10500, 10560, 10620,   120,   120,   120, 
    10680, 10740, 10800, 10860,   120, 10920, 10980, 11040, 11100,   120, 
      120,   120,   120, 11160, 11220,   120,   120, 11280, 11340,   120, 
    11400, 11460, 11520, 11580,   120, 11640, 11700, 11760, 11820,   120, 
      120, 11880, 11940, 12000, 12060, 12120,   120, 12180,   120, 12240, 
      120,   120
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\6\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\6\1\17\3\6"+
    "\1\20\1\21\2\6\1\22\1\23\1\24\2\6\1\25"+
    "\1\6\1\26\2\6\1\27\1\30\1\31\3\6\1\32"+
    "\1\33\1\34\3\6\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\74\3\76\0\1\5\75\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\3\54\1\0\3\54\1\0"+
    "\31\54\1\0\2\54\4\0\1\54\14\0\1\55\1\56"+
    "\1\55\4\0\3\55\1\0\3\55\1\0\31\55\27\0"+
    "\1\57\2\0\1\60\1\61\7\0\1\62\1\63\52\0"+
    "\2\54\1\0\1\54\2\0\1\54\1\0\1\54\1\64"+
    "\1\54\1\0\3\54\1\0\1\54\1\65\27\54\1\0"+
    "\2\54\4\0\1\54\13\0\2\54\1\0\1\54\2\0"+
    "\1\54\1\0\3\54\1\0\3\54\1\0\4\54\1\66"+
    "\24\54\1\0\2\54\4\0\1\54\32\0\1\67\31\0"+
    "\1\70\22\0\2\54\1\0\1\54\2\0\1\54\1\0"+
    "\3\54\1\0\3\54\1\0\1\54\1\71\27\54\1\0"+
    "\2\54\4\0\1\54\13\0\2\54\1\0\1\54\2\0"+
    "\1\54\1\0\3\54\1\0\1\54\1\72\1\54\1\0"+
    "\31\54\1\0\2\54\4\0\1\54\13\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\3\54\1\0\3\54\1\0"+
    "\5\54\1\73\20\54\1\74\2\54\1\0\2\54\4\0"+
    "\1\54\13\0\2\54\1\0\1\54\2\0\1\54\1\0"+
    "\3\54\1\0\3\54\1\0\4\54\1\75\24\54\1\0"+
    "\2\54\4\0\1\54\13\0\2\54\1\0\1\54\2\0"+
    "\1\54\1\0\3\54\1\0\3\54\1\0\21\54\1\76"+
    "\7\54\1\0\2\54\4\0\1\54\13\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\3\54\1\0\3\54\1\0"+
    "\6\54\1\77\22\54\1\0\2\54\4\0\1\54\13\0"+
    "\2\54\1\0\1\54\2\0\1\54\1\0\1\54\1\100"+
    "\1\54\1\0\3\54\1\0\17\54\1\101\11\54\1\0"+
    "\2\54\4\0\1\54\13\0\2\54\1\0\1\54\2\0"+
    "\1\54\1\0\1\102\2\54\1\0\3\54\1\0\4\54"+
    "\1\103\24\54\1\0\2\54\4\0\1\54\13\0\2\54"+
    "\1\0\1\54\2\0\1\54\1\0\3\54\1\0\3\54"+
    "\1\0\4\54\1\104\24\54\1\0\2\54\4\0\1\54"+
    "\13\0\2\54\1\0\1\54\2\0\1\54\1\0\3\54"+
    "\1\0\3\54\1\0\27\54\1\105\1\54\1\0\2\54"+
    "\4\0\1\54\13\0\2\54\1\0\1\54\2\0\1\54"+
    "\1\0\3\54\1\0\3\54\1\0\1\54\1\106\27\54"+
    "\1\0\2\54\4\0\1\54\13\0\2\54\1\0\1\54"+
    "\2\0\1\54\1\0\3\54\1\0\3\54\1\0\4\54"+
    "\1\107\24\54\1\0\2\54\4\0\1\54\22\0\1\110"+
    "\74\0\1\111\74\0\1\112\75\0\1\113\102\0\1\114"+
    "\63\0\1\115\73\0\1\116\5\0\1\117\103\0\1\120"+
    "\113\0\1\121\43\0\1\122\101\0\1\123\75\0\1\124"+
    "\77\0\1\125\75\0\1\126\74\0\1\127\50\0\1\130"+
    "\25\0\1\131\77\0\1\132\53\0\1\133\55\0\1\134"+
    "\127\0\1\135\66\0\1\136\100\0\1\137\75\0\1\140"+
    "\36\0\1\141\74\0\1\142\74\0\1\143\73\0\1\144"+
    "\73\0\1\145\5\0\1\146\100\0\1\147\71\0\1\150"+
    "\76\0\1\151\105\0\1\152\61\0\1\153\65\0\1\154"+
    "\75\0\1\155\71\0\1\156\102\0\1\157\64\0\1\160"+
    "\77\0\1\161\103\0\1\162\74\0\1\163\55\0\1\164"+
    "\74\0\1\165\76\0\1\166\74\0\1\167\75\0\1\170"+
    "\56\0\1\171\74\0\1\172\75\0\1\173\6\0\1\174"+
    "\1\175\105\0\1\176\44\0\1\177\112\0\1\200\104\0"+
    "\1\201\54\0\1\202\116\0\1\203\57\0\1\204\53\0"+
    "\1\205\74\0\1\206\73\0\1\207\31\0\1\210\54\0"+
    "\1\211\61\0\1\212\107\0\1\213\104\0\1\214\55\0"+
    "\1\215\20\0\1\216\1\217\51\0\1\220\116\0\1\221"+
    "\50\0\1\222\73\0\1\223\65\0\1\224\74\0\1\225"+
    "\100\0\1\226\77\0\1\227\72\0\1\230\75\0\1\231"+
    "\66\0\1\232\62\0\1\233\124\0\1\234\71\0\1\235"+
    "\61\0\1\236\77\0\1\237\101\0\1\240\76\0\1\241"+
    "\74\0\1\242\54\0\1\243\104\0\1\244\100\0\1\245"+
    "\60\0\1\246\65\0\1\247\62\0\1\250\113\0\1\251"+
    "\67\0\1\252\107\0\1\253\54\0\1\254\62\0\1\255"+
    "\77\0\1\256\74\0\1\257\76\0\1\260\101\0\1\261"+
    "\101\0\1\262\50\0\1\263\121\0\1\264\66\0\1\265"+
    "\77\0\1\266\67\0\1\267\67\0\1\270\71\0\1\271"+
    "\73\0\1\272\77\0\1\273\71\0\1\274\111\0\1\275"+
    "\66\0\1\276\64\0\1\277\73\0\1\300\66\0\1\301"+
    "\100\0\1\302\73\0\1\303\107\0\1\304\70\0\1\305"+
    "\47\0\1\306\74\0\1\307\107\0\1\310\70\0\1\311"+
    "\67\0\1\312\71\0\1\313\104\0\1\314\62\0\1\315"+
    "\73\0\1\316\73\0\1\317\120\0\1\320\57\0\1\321"+
    "\71\0\1\322\73\0\1\323\54\0\1\324\103\0\1\325"+
    "\73\0\1\326\102\0\1\327\105\0\1\330\61\0\1\331"+
    "\104\0\1\332\42\0\1\333\104\0\1\334\110\0\1\335"+
    "\53\0\1\336\65\0\1\337\113\0\1\340\60\0\1\341"+
    "\101\0\1\342\71\0\1\343\105\0\1\344\75\0\1\345"+
    "\46\0\1\346\104\0\1\347\62\0\1\350\73\0\1\351"+
    "\113\0\1\352\64\0\1\353\73\0\1\354\71\0\1\355"+
    "\111\0\1\356\67\0\1\357\57\0\1\360\67\0\1\361"+
    "\124\0\1\362\76\0\1\363\56\0\1\364\107\0\1\365"+
    "\65\0\1\366\61\0\1\367\72\0\1\370\100\0\1\371"+
    "\64\0\1\372\62\0\1\373\113\0\1\374\75\0\1\375"+
    "\71\0\1\376\73\0\1\377\100\0\1\u0100\71\0\1\u0101"+
    "\61\0\1\u0102\62\0\1\u0103\111\0\1\u0104\111\0\1\u0105"+
    "\66\0\1\u0106\30\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  1,  9,  9,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  9,  9,  1,  9,  9,  9,  9,  9,  9,  9,  9,  0,  9,  0,  9, 
     0,  0,  0,  1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  9,  9,  9, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9,  9,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  9,  9,  9,  9,  0,  0,  9,  9,  0,  0,  9, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0, 
     9,  0,  9,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[12300];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2302) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 3: 
        case 4: 
          {  return symbolFactory.newSymbol("WS", WS); }
        case 263: break;
        case 57: 
          {  return symbolFactory.newSymbol("ID", ID);  }
        case 264: break;
        case 258: 
          {  return symbolFactory.newSymbol("aboutEachAttr",aboutEachAttr );  }
        case 265: break;
        case 30: 
          {  return symbolFactory.newSymbol("KRSQBKT",KRSQBKT);  }
        case 266: break;
        case 29: 
          {  return symbolFactory.newSymbol("KLSQBKT",KLSQBKT);  }
        case 267: break;
        case 54: 
          {  return symbolFactory.newSymbol("ORSHIFT",ORSHIFT);  }
        case 268: break;
        case 224: 
          {  return symbolFactory.newSymbol("about",bagID );  }
        case 269: break;
        case 146: 
          {  return symbolFactory.newSymbol("value", value);  }
        case 270: break;
        case 131: 
          {  return symbolFactory.newSymbol("about",about );  }
        case 271: break;
        case 33: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 272: break;
        case 28: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 273: break;
        case 6: 
          {  return symbolFactory.newSymbol("RDFID", RDFID);  }
        case 274: break;
        case 8: 
          {  return symbolFactory.newSymbol("SLASH", SLASH);  }
        case 275: break;
        case 9: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 276: break;
        case 10: 
          {  return symbolFactory.newSymbol("UNDER", UNDER);  }
        case 277: break;
        case 36: 
          {  return symbolFactory.newSymbol("QUEST", QUEST);  }
        case 278: break;
        case 40: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 279: break;
        case 2: 
        case 5: 
        case 12: 
        case 13: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 25: 
        case 26: 
        case 27: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 280: break;
        case 260: 
          {  return symbolFactory.newSymbol("referencedItem", referencedItem);  }
        case 281: break;
        case 244: 
          {  return symbolFactory.newSymbol("inlineItem",inlineItem );  }
        case 282: break;
        case 15: 
          {  return symbolFactory.newSymbol("OGT",OGT);  }
        case 283: break;
        case 7: 
          {  return symbolFactory.newSymbol("QOT", QOT);  }
        case 284: break;
        case 11: 
          {  return symbolFactory.newSymbol("OLT",OLT);  }
        case 285: break;
        case 55: 
          {  return symbolFactory.newSymbol("OGE",OGE);  }
        case 286: break;
        case 71: 
          {  return symbolFactory.newSymbol("OLE",OLE);  }
        case 287: break;
        case 84: 
          {  return symbolFactory.newSymbol("bag",bag );  }
        case 288: break;
        case 219: 
          {  return symbolFactory.newSymbol("propName",propName );  }
        case 289: break;
        case 218: 
          {  return symbolFactory.newSymbol("propAttr",propAttr );  }
        case 290: break;
        case 217: 
          {  return symbolFactory.newSymbol("property",property );  }
        case 291: break;
        case 212: 
          {  return symbolFactory.newSymbol("typeName",typeName );  }
        case 292: break;
        case 207: 
          {  return symbolFactory.newSymbol("IDsymbol",IDsymbol );  }
        case 293: break;
        case 206: 
          {  return symbolFactory.newSymbol("sequence",sequence );  }
        case 294: break;
        case 205: 
          {  return symbolFactory.newSymbol("dataType",dataType );  }
        case 295: break;
        case 204: 
          {  return symbolFactory.newSymbol("resource",resource );  }
        case 296: break;
        case 198: 
          {  return symbolFactory.newSymbol("StartTag", StartTag);  }
        case 297: break;
        case 261: 
          {  return symbolFactory.newSymbol("Description",Description );  }
        case 298: break;
        case 250: 
          {  return symbolFactory.newSymbol("idAboutAttr",idAboutAttr );  }
        case 299: break;
        case 249: 
          {  return symbolFactory.newSymbol("alternative",alternative );  }
        case 300: break;
        case 98: 
          { return symbolFactory.newSymbol("AnyTag", AnyTag);  }
        case 301: break;
        case 116: 
          {  return symbolFactory.newSymbol("name",name );  }
        case 302: break;
        case 14: 
          {  return symbolFactory.newSymbol("FULL", FULL);  }
        case 303: break;
        case 34: 
          {  return symbolFactory.newSymbol("ARON", ARON);  }
        case 304: break;
        case 35: 
          {  return symbolFactory.newSymbol("OPSL", OPSL);  }
        case 305: break;
        case 37: 
          {  return symbolFactory.newSymbol("EXCL", EXCL);  }
        case 306: break;
        case 38: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 307: break;
        case 39: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 308: break;
        case 256: 
          {  return symbolFactory.newSymbol("aboutEach",aboutEach);  }
        case 309: break;
        case 235: 
          {  return symbolFactory.newSymbol("parseType",parseType );  }
        case 310: break;
        case 232: 
          {  return symbolFactory.newSymbol("idRefAttr",idRefAttr);  }
        case 311: break;
        case 231: 
          {  return symbolFactory.newSymbol("container",container );  }
        case 312: break;
        case 230: 
          {  return symbolFactory.newSymbol("typedNode",typedNode );  }
        case 313: break;
        case 229: 
          {  return symbolFactory.newSymbol("bagIdAttr",bagIdAttr );  }
        case 314: break;
        case 45: 
          {  return symbolFactory.newSymbol("RDFNODEID", RDFNODEID);  }
        case 315: break;
        case 74: 
          { return symbolFactory.newSymbol("ResumeTag", ResumeTag);  }
        case 316: break;
        case 43: 
        case 51: 
        case 52: 
        case 53: 
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
          { return symbolFactory.newSymbol("anyString",anyString);  }
        case 317: break;
        case 239: 
          {  return symbolFactory.newSymbol("nodeID",nodeID );  }
        case 318: break;
        case 236: 
          {  return symbolFactory.newSymbol("EndTag", EndTag);  }
        case 319: break;
        case 172: 
          {  return symbolFactory.newSymbol("member", member);  }
        case 320: break;
        case 171: 
          {  return symbolFactory.newSymbol("NSname",NSname );  }
        case 321: break;
        case 32: 
          {  return symbolFactory.newSymbol("KRBRKT",KRBRKT);  }
        case 322: break;
        case 31: 
          {  return symbolFactory.newSymbol("KLBRKT",KLBRKT);  }
        case 323: break;
        case 24: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 324: break;
        case 41: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 325: break;
        case 42: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 326: break;
        case 47: 
          {  return symbol("OLSHIFT",OLSHIFT);  }
        case 327: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
